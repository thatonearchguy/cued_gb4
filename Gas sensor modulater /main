
# Tasks: Read analog signal, plot real-time response, measure peak, decay, duration, and compute statistics

import serial
import time
import matplotlib.pyplot as plt
import numpy as np

# --- Configuration ---
PORT = "/dev/tty.usbmodem142201"
BAUDRATE = 9600
DURATION = 10 # seconds
SAMPLING_INTERVAL = 0.01 #4 Hz

arduino = serial.Serial("/dev/tty.usbmodem142201", 9600)
#while arduino.is_open:
    #data = arduino.readline().decode().strip()
    #print(f"Sensor Value: {data}")



# --- Data Acquisition ---
timestamps = []
sensor_values = []
start_time = time.time()

print("Reading sensor data...")
while time.time() - start_time < DURATION:
    line = arduino.readline().decode('utf-8').strip()
    print(f"Sensor Value: {line}")
    try:
        value = float(line.split()[2])
        current_time = time.time() - start_time
        timestamps.append(current_time)
        sensor_values.append(value)
    except ValueError:
        continue
    time.sleep(SAMPLING_INTERVAL)
   

arduino.close()
print("Done.")

# --- Convert to NumPy arrays ---
timestamps = np.array(timestamps)
sensor_values = np.array(sensor_values)
print(timestamps)
print(sensor_values)

print(sensor_values)
print(timestamps)
# --- Plot sensor response ---
plt.figure(figsize=(10, 5))
plt.plot(timestamps, sensor_values, label='MQ3 Output')
plt.xlabel('Time (s)')
plt.ylabel('Sensor Value (ADC)')
plt.title('MQ3 Sensor Real-Time Response')
plt.legend()
plt.grid(True)
plt.show()

# --- Feature Extraction ---
def analyze_sensor_response(time_data, sensor_data):
    peak_value = np.max(sensor_data)
    time_to_peak = time_data[np.argmax(sensor_data)]

    # Estimate time to return near baseline
    baseline = np.median(sensor_data[:int(0.1 * len(sensor_data))])
    threshold = baseline + 0.05 * (peak_value - baseline)
    decay_time = None
    for i in range(np.argmax(sensor_data), len(sensor_data)):
        if sensor_data[i] < threshold:
            decay_time = time_data[i] - time_to_peak
            break

    # Duration above threshold
    activity_indices = np.where(sensor_data > threshold)[0]
    duration = (activity_indices[-1] - activity_indices[0]) / (1/SAMPLING_INTERVAL) if len(activity_indices) > 0 else 0

    energy = np.trapz(sensor_data, dx=SAMPLING_INTERVAL)

    return {
        'peak': peak_value,
        'time_to_peak': time_to_peak,
        'decay_time': decay_time,
        'duration': duration,
        'energy': energy
    }

# --- Compute & Print Results ---
results = analyze_sensor_response(timestamps, sensor_values)
print("\nSensor Response Summary:")
for k, v in results.items():
    print(f"{k}: {v:.2f}")

# ---decoding demands---

def decode_command(features):
    """
    Decodes the sprayer action into one of four commands based on extracted features.
    You can adjust the thresholds based on your experimental data.
    """
    # Example logic (customize as needed):
    if features['duration'] > 5 and features['energy'] > 10000:
        return "UP"
    elif features['duration'] > 2 and features['time_to_peak'] < 2:
        return "DOWN"
    elif features['peak'] > 800:
        return "RIGHT"
    elif features['decay_time'] and features['decay_time'] > 2:
        return "LEFT"
    else:
        return "UNKNOWN"


# --- Decode Command ---
#command = decode_command(results)
#print(f"\nDecoded Command: {command}")
# ...existing code...